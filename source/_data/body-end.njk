<script data-pjax>

function whenDOMReady() {
  /* 替换站点标题中不规范的部分 */
  const titleReplaceMap = new Map([
    [/([^\w\d\s])?(:\s)+/g, '$1：'], // 将中文语句中的「英文冒号+空格」替换为「中文冒号」
  ]);
  for (let [key, value] of titleReplaceMap) {
    document.title = document.title.replaceAll(key, value);
  }

  /* 替换归档页面中不规范的部分 */
  const collectionHeaderReplaceMap = new Map([
    [/.*(目前共计[\d\s]*篇文章).*/g, '$1'], // 将归档页面上方的提示语简化为「目前共计[\d\s]*篇文章」
  ]);
  let collectionHeader = document.getElementsByClassName("collection-header");
  for (let i = 0; i < collectionHeader.length; i++) {
    for (let [key, value] of collectionHeaderReplaceMap) {
      collectionHeader[i].innerHTML = collectionHeader[i].innerHTML.replaceAll(key, value);
    }
  }

  /* 替换文章信息中不规范的部分 */
  const postMetaReplaceMap = new Map([
    [/，/g, '>'], // 将分类之间的分隔符「中文逗号」替换为「大于号」
  ]);
  let postMeta = document.getElementsByClassName("post-meta");
  for (let i = 0; i < postMeta.length; i++) {
    for (let [key, value] of postMetaReplaceMap) {
      postMeta[i].innerHTML = postMeta[i].innerHTML.replaceAll(key, value);
    }
  }

  /* 替换页脚中不规范的部分 */
  const copyrightReplaceMap = new Map([
    [/© /g, '<span class="with-love"><i class="fa fa-copyright"></i> </span>'], // 将版权符号替换为 fa
    [/fa /g, 'far '], // 将 fa 替换为 far
  ]);
  let copyright = document.getElementsByClassName("copyright");
  for (let i = 0; i < copyright.length; i++) {
    for (let [key, value] of copyrightReplaceMap) {
      copyright[i].innerHTML = copyright[i].innerHTML.replaceAll(key, value);
    }
  }
};
whenDOMReady();

</script>

<script data-pjax>

/* 减少动画时长 */

/* Ref: https://github.com/PaperStrike/hexo-theme-next/blob/main/source/js/motion.js */

NexT.motion = {};

NexT.motion.integrator = {
  queue: [],
  init : function() {
    this.queue = [];
    return this;
  },
  add: function(fn) {
    const sequence = fn();
    if (CONFIG.motion.async) this.queue.push(sequence);
    else this.queue = this.queue.concat(sequence);
    return this;
  },
  bootstrap: function() {
    if (!CONFIG.motion.async) this.queue = [this.queue];
    this.queue.forEach(sequence => {
      const timeline = window.anime.timeline({
        duration: 20,
        easing  : 'linear'
      });
      sequence.forEach(item => {
        if (item.deltaT) timeline.add(item, item.deltaT);
        else timeline.add(item);
      });
    });
  }
};

NexT.motion.middleWares = {
  header: function() {
    const sequence = [];

    function getMistLineSettings(targets) {
      sequence.push({
        targets,
        scaleX  : [0, 1],
        duration: 60,
        deltaT  : '-=20'
      });
    }

    function pushToSequence(targets, sequenceQueue = false) {
      sequence.push({
        targets,
        opacity: 1,
        top    : 0,
        deltaT : sequenceQueue ? '-=20' : '-=0'
      });
    }

    pushToSequence('.header');
    CONFIG.scheme === 'Mist' && getMistLineSettings('.logo-line');
    CONFIG.scheme === 'Muse' && pushToSequence('.custom-logo-image');
    pushToSequence('.site-title');
    pushToSequence('.site-brand-container .toggle', true);
    pushToSequence('.site-subtitle');
    (CONFIG.scheme === 'Pisces' || CONFIG.scheme === 'Gemini') && pushToSequence('.custom-logo-image');

    document.querySelectorAll('.menu-item').forEach(targets => {
      sequence.push({
        targets,
        complete: () => targets.classList.add('animated', 'fadeInDown'),
        deltaT  : '-=20'
      });
    });

    return sequence;
  },

  subMenu: function() {
    const subMenuItem = document.querySelectorAll('.sub-menu .menu-item');
    if (subMenuItem.length > 0) {
      subMenuItem.forEach(element => {
        element.classList.add('animated');
      });
    }
    return [];
  },

  postList: function() {
    const sequence = [];
    const { post_block, post_header, post_body, coll_header } = CONFIG.motion.transition;

    function animate(animation, selector) {
      if (!animation) return;
      document.querySelectorAll(selector).forEach(targets => {
        sequence.push({
          targets,
          complete: () => targets.classList.add('animated', animation),
          deltaT  : '-=10'
        });
      });
    }

    animate(post_block, '.post-block, .pagination, .comments');
    animate(coll_header, '.collection-header');
    animate(post_header, '.post-header');
    animate(post_body, '.post-body');

    return sequence;
  },

  sidebar: function() {
    const sidebar = document.querySelector('.sidebar');
    const sidebarTransition = CONFIG.motion.transition.sidebar;
    // Only for Pisces | Gemini.
    if (sidebarTransition && (CONFIG.scheme === 'Pisces' || CONFIG.scheme === 'Gemini')) {
      return [{
        targets : sidebar,
        complete: () => sidebar.classList.add('animated', sidebarTransition)
      }];
    }
    return [];
  },

  footer: function() {
    return [{
      targets: document.querySelector('.footer'),
      opacity: 1
    }];
  }
};

</script>
